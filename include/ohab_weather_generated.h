// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OHABWEATHER_OHAB_WEATHER_H_
#define FLATBUFFERS_GENERATED_OHABWEATHER_OHAB_WEATHER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace ohab_weather {

struct Weather;
struct WeatherBuilder;

struct CurrentWeather;
struct CurrentWeatherBuilder;

struct Forecast;
struct ForecastBuilder;

struct Alert;
struct AlertBuilder;

struct PastWeather;
struct PastWeatherBuilder;

struct Weather FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WeatherBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURRENT = 4,
    VT_DAYS = 6,
    VT_ALERT = 8,
    VT_WINDSPEEDUNIT = 10,
    VT_PRECIPITATIONUNIT = 12,
    VT_PASTHOUR = 14,
    VT_PASTDAY = 16
  };
  const ohab_weather::CurrentWeather *current() const {
    return GetPointer<const ohab_weather::CurrentWeather *>(VT_CURRENT);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ohab_weather::Forecast>> *days() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ohab_weather::Forecast>> *>(VT_DAYS);
  }
  const ohab_weather::Alert *alert() const {
    return GetPointer<const ohab_weather::Alert *>(VT_ALERT);
  }
  const ::flatbuffers::String *windSpeedUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WINDSPEEDUNIT);
  }
  const ::flatbuffers::String *precipitationUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRECIPITATIONUNIT);
  }
  const ohab_weather::PastWeather *pastHour() const {
    return GetPointer<const ohab_weather::PastWeather *>(VT_PASTHOUR);
  }
  const ohab_weather::PastWeather *pastDay() const {
    return GetPointer<const ohab_weather::PastWeather *>(VT_PASTDAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CURRENT) &&
           verifier.VerifyTable(current()) &&
           VerifyOffset(verifier, VT_DAYS) &&
           verifier.VerifyVector(days()) &&
           verifier.VerifyVectorOfTables(days()) &&
           VerifyOffset(verifier, VT_ALERT) &&
           verifier.VerifyTable(alert()) &&
           VerifyOffset(verifier, VT_WINDSPEEDUNIT) &&
           verifier.VerifyString(windSpeedUnit()) &&
           VerifyOffset(verifier, VT_PRECIPITATIONUNIT) &&
           verifier.VerifyString(precipitationUnit()) &&
           VerifyOffset(verifier, VT_PASTHOUR) &&
           verifier.VerifyTable(pastHour()) &&
           VerifyOffset(verifier, VT_PASTDAY) &&
           verifier.VerifyTable(pastDay()) &&
           verifier.EndTable();
  }
};

struct WeatherBuilder {
  typedef Weather Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_current(::flatbuffers::Offset<ohab_weather::CurrentWeather> current) {
    fbb_.AddOffset(Weather::VT_CURRENT, current);
  }
  void add_days(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ohab_weather::Forecast>>> days) {
    fbb_.AddOffset(Weather::VT_DAYS, days);
  }
  void add_alert(::flatbuffers::Offset<ohab_weather::Alert> alert) {
    fbb_.AddOffset(Weather::VT_ALERT, alert);
  }
  void add_windSpeedUnit(::flatbuffers::Offset<::flatbuffers::String> windSpeedUnit) {
    fbb_.AddOffset(Weather::VT_WINDSPEEDUNIT, windSpeedUnit);
  }
  void add_precipitationUnit(::flatbuffers::Offset<::flatbuffers::String> precipitationUnit) {
    fbb_.AddOffset(Weather::VT_PRECIPITATIONUNIT, precipitationUnit);
  }
  void add_pastHour(::flatbuffers::Offset<ohab_weather::PastWeather> pastHour) {
    fbb_.AddOffset(Weather::VT_PASTHOUR, pastHour);
  }
  void add_pastDay(::flatbuffers::Offset<ohab_weather::PastWeather> pastDay) {
    fbb_.AddOffset(Weather::VT_PASTDAY, pastDay);
  }
  explicit WeatherBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Weather> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Weather>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Weather> CreateWeather(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<ohab_weather::CurrentWeather> current = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ohab_weather::Forecast>>> days = 0,
    ::flatbuffers::Offset<ohab_weather::Alert> alert = 0,
    ::flatbuffers::Offset<::flatbuffers::String> windSpeedUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> precipitationUnit = 0,
    ::flatbuffers::Offset<ohab_weather::PastWeather> pastHour = 0,
    ::flatbuffers::Offset<ohab_weather::PastWeather> pastDay = 0) {
  WeatherBuilder builder_(_fbb);
  builder_.add_pastDay(pastDay);
  builder_.add_pastHour(pastHour);
  builder_.add_precipitationUnit(precipitationUnit);
  builder_.add_windSpeedUnit(windSpeedUnit);
  builder_.add_alert(alert);
  builder_.add_days(days);
  builder_.add_current(current);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Weather> CreateWeatherDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<ohab_weather::CurrentWeather> current = 0,
    const std::vector<::flatbuffers::Offset<ohab_weather::Forecast>> *days = nullptr,
    ::flatbuffers::Offset<ohab_weather::Alert> alert = 0,
    const char *windSpeedUnit = nullptr,
    const char *precipitationUnit = nullptr,
    ::flatbuffers::Offset<ohab_weather::PastWeather> pastHour = 0,
    ::flatbuffers::Offset<ohab_weather::PastWeather> pastDay = 0) {
  auto days__ = days ? _fbb.CreateVector<::flatbuffers::Offset<ohab_weather::Forecast>>(*days) : 0;
  auto windSpeedUnit__ = windSpeedUnit ? _fbb.CreateString(windSpeedUnit) : 0;
  auto precipitationUnit__ = precipitationUnit ? _fbb.CreateString(precipitationUnit) : 0;
  return ohab_weather::CreateWeather(
      _fbb,
      current,
      days__,
      alert,
      windSpeedUnit__,
      precipitationUnit__,
      pastHour,
      pastDay);
}

struct CurrentWeather FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CurrentWeatherBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OUTDOORTEMPERATURE = 4,
    VT_WINDDIRECTION = 6,
    VT_WINDSPEED = 8,
    VT_RELATIVEHUMIDITY = 10,
    VT_MOONPHASE = 12
  };
  float outdoorTemperature() const {
    return GetField<float>(VT_OUTDOORTEMPERATURE, 0.0f);
  }
  float windDirection() const {
    return GetField<float>(VT_WINDDIRECTION, 0.0f);
  }
  float windSpeed() const {
    return GetField<float>(VT_WINDSPEED, 0.0f);
  }
  float relativeHumidity() const {
    return GetField<float>(VT_RELATIVEHUMIDITY, 0.0f);
  }
  float moonPhase() const {
    return GetField<float>(VT_MOONPHASE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_OUTDOORTEMPERATURE, 4) &&
           VerifyField<float>(verifier, VT_WINDDIRECTION, 4) &&
           VerifyField<float>(verifier, VT_WINDSPEED, 4) &&
           VerifyField<float>(verifier, VT_RELATIVEHUMIDITY, 4) &&
           VerifyField<float>(verifier, VT_MOONPHASE, 4) &&
           verifier.EndTable();
  }
};

struct CurrentWeatherBuilder {
  typedef CurrentWeather Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_outdoorTemperature(float outdoorTemperature) {
    fbb_.AddElement<float>(CurrentWeather::VT_OUTDOORTEMPERATURE, outdoorTemperature, 0.0f);
  }
  void add_windDirection(float windDirection) {
    fbb_.AddElement<float>(CurrentWeather::VT_WINDDIRECTION, windDirection, 0.0f);
  }
  void add_windSpeed(float windSpeed) {
    fbb_.AddElement<float>(CurrentWeather::VT_WINDSPEED, windSpeed, 0.0f);
  }
  void add_relativeHumidity(float relativeHumidity) {
    fbb_.AddElement<float>(CurrentWeather::VT_RELATIVEHUMIDITY, relativeHumidity, 0.0f);
  }
  void add_moonPhase(float moonPhase) {
    fbb_.AddElement<float>(CurrentWeather::VT_MOONPHASE, moonPhase, 0.0f);
  }
  explicit CurrentWeatherBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CurrentWeather> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CurrentWeather>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CurrentWeather> CreateCurrentWeather(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float outdoorTemperature = 0.0f,
    float windDirection = 0.0f,
    float windSpeed = 0.0f,
    float relativeHumidity = 0.0f,
    float moonPhase = 0.0f) {
  CurrentWeatherBuilder builder_(_fbb);
  builder_.add_moonPhase(moonPhase);
  builder_.add_relativeHumidity(relativeHumidity);
  builder_.add_windSpeed(windSpeed);
  builder_.add_windDirection(windDirection);
  builder_.add_outdoorTemperature(outdoorTemperature);
  return builder_.Finish();
}

struct Forecast FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ForecastBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MINTEMPERATURE = 4,
    VT_MAXTEMPERATURE = 6,
    VT_MAXWINDSPEED = 8,
    VT_DOMINANTWINDDIRECTION = 10,
    VT_CONDITIONCODE = 12,
    VT_CLOUDINESS = 14,
    VT_SNOW = 16,
    VT_RAIN = 18,
    VT_SHOWERS = 20
  };
  float minTemperature() const {
    return GetField<float>(VT_MINTEMPERATURE, 0.0f);
  }
  float maxTemperature() const {
    return GetField<float>(VT_MAXTEMPERATURE, 0.0f);
  }
  float maxWindSpeed() const {
    return GetField<float>(VT_MAXWINDSPEED, 0.0f);
  }
  float dominantWindDirection() const {
    return GetField<float>(VT_DOMINANTWINDDIRECTION, 0.0f);
  }
  uint8_t conditionCode() const {
    return GetField<uint8_t>(VT_CONDITIONCODE, 0);
  }
  float cloudiness() const {
    return GetField<float>(VT_CLOUDINESS, 0.0f);
  }
  float snow() const {
    return GetField<float>(VT_SNOW, 0.0f);
  }
  float rain() const {
    return GetField<float>(VT_RAIN, 0.0f);
  }
  float showers() const {
    return GetField<float>(VT_SHOWERS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_MINTEMPERATURE, 4) &&
           VerifyField<float>(verifier, VT_MAXTEMPERATURE, 4) &&
           VerifyField<float>(verifier, VT_MAXWINDSPEED, 4) &&
           VerifyField<float>(verifier, VT_DOMINANTWINDDIRECTION, 4) &&
           VerifyField<uint8_t>(verifier, VT_CONDITIONCODE, 1) &&
           VerifyField<float>(verifier, VT_CLOUDINESS, 4) &&
           VerifyField<float>(verifier, VT_SNOW, 4) &&
           VerifyField<float>(verifier, VT_RAIN, 4) &&
           VerifyField<float>(verifier, VT_SHOWERS, 4) &&
           verifier.EndTable();
  }
};

struct ForecastBuilder {
  typedef Forecast Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_minTemperature(float minTemperature) {
    fbb_.AddElement<float>(Forecast::VT_MINTEMPERATURE, minTemperature, 0.0f);
  }
  void add_maxTemperature(float maxTemperature) {
    fbb_.AddElement<float>(Forecast::VT_MAXTEMPERATURE, maxTemperature, 0.0f);
  }
  void add_maxWindSpeed(float maxWindSpeed) {
    fbb_.AddElement<float>(Forecast::VT_MAXWINDSPEED, maxWindSpeed, 0.0f);
  }
  void add_dominantWindDirection(float dominantWindDirection) {
    fbb_.AddElement<float>(Forecast::VT_DOMINANTWINDDIRECTION, dominantWindDirection, 0.0f);
  }
  void add_conditionCode(uint8_t conditionCode) {
    fbb_.AddElement<uint8_t>(Forecast::VT_CONDITIONCODE, conditionCode, 0);
  }
  void add_cloudiness(float cloudiness) {
    fbb_.AddElement<float>(Forecast::VT_CLOUDINESS, cloudiness, 0.0f);
  }
  void add_snow(float snow) {
    fbb_.AddElement<float>(Forecast::VT_SNOW, snow, 0.0f);
  }
  void add_rain(float rain) {
    fbb_.AddElement<float>(Forecast::VT_RAIN, rain, 0.0f);
  }
  void add_showers(float showers) {
    fbb_.AddElement<float>(Forecast::VT_SHOWERS, showers, 0.0f);
  }
  explicit ForecastBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Forecast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Forecast>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Forecast> CreateForecast(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float minTemperature = 0.0f,
    float maxTemperature = 0.0f,
    float maxWindSpeed = 0.0f,
    float dominantWindDirection = 0.0f,
    uint8_t conditionCode = 0,
    float cloudiness = 0.0f,
    float snow = 0.0f,
    float rain = 0.0f,
    float showers = 0.0f) {
  ForecastBuilder builder_(_fbb);
  builder_.add_showers(showers);
  builder_.add_rain(rain);
  builder_.add_snow(snow);
  builder_.add_cloudiness(cloudiness);
  builder_.add_dominantWindDirection(dominantWindDirection);
  builder_.add_maxWindSpeed(maxWindSpeed);
  builder_.add_maxTemperature(maxTemperature);
  builder_.add_minTemperature(minTemperature);
  builder_.add_conditionCode(conditionCode);
  return builder_.Finish();
}

struct Alert FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AlertBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEVEL = 4,
    VT_TEXT = 6
  };
  const ::flatbuffers::String *level() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LEVEL);
  }
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LEVEL) &&
           verifier.VerifyString(level()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct AlertBuilder {
  typedef Alert Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_level(::flatbuffers::Offset<::flatbuffers::String> level) {
    fbb_.AddOffset(Alert::VT_LEVEL, level);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(Alert::VT_TEXT, text);
  }
  explicit AlertBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Alert> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Alert>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Alert> CreateAlert(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> level = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  AlertBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_level(level);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Alert> CreateAlertDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *level = nullptr,
    const char *text = nullptr) {
  auto level__ = level ? _fbb.CreateString(level) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return ohab_weather::CreateAlert(
      _fbb,
      level__,
      text__);
}

struct PastWeather FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PastWeatherBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAXWINDSPEED = 4,
    VT_PRECIPITATIONS = 6
  };
  float maxWindSpeed() const {
    return GetField<float>(VT_MAXWINDSPEED, 0.0f);
  }
  float precipitations() const {
    return GetField<float>(VT_PRECIPITATIONS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_MAXWINDSPEED, 4) &&
           VerifyField<float>(verifier, VT_PRECIPITATIONS, 4) &&
           verifier.EndTable();
  }
};

struct PastWeatherBuilder {
  typedef PastWeather Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_maxWindSpeed(float maxWindSpeed) {
    fbb_.AddElement<float>(PastWeather::VT_MAXWINDSPEED, maxWindSpeed, 0.0f);
  }
  void add_precipitations(float precipitations) {
    fbb_.AddElement<float>(PastWeather::VT_PRECIPITATIONS, precipitations, 0.0f);
  }
  explicit PastWeatherBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PastWeather> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PastWeather>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PastWeather> CreatePastWeather(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float maxWindSpeed = 0.0f,
    float precipitations = 0.0f) {
  PastWeatherBuilder builder_(_fbb);
  builder_.add_precipitations(precipitations);
  builder_.add_maxWindSpeed(maxWindSpeed);
  return builder_.Finish();
}

inline const ohab_weather::Weather *GetWeather(const void *buf) {
  return ::flatbuffers::GetRoot<ohab_weather::Weather>(buf);
}

inline const ohab_weather::Weather *GetSizePrefixedWeather(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ohab_weather::Weather>(buf);
}

inline bool VerifyWeatherBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ohab_weather::Weather>(nullptr);
}

inline bool VerifySizePrefixedWeatherBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ohab_weather::Weather>(nullptr);
}

inline void FinishWeatherBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ohab_weather::Weather> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWeatherBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ohab_weather::Weather> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ohab_weather

#endif  // FLATBUFFERS_GENERATED_OHABWEATHER_OHAB_WEATHER_H_
